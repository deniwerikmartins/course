<?php
/**
 * Created by PhpStorm.
 * User: PXP DIGITAL
 * Date: 18/05/2018
 * Time: 09:58
 */
namespace Acme\Tests;

/*use Acme\Http\Response;
use Acme\Http\Request;*/
use Acme\Validation\Validator;
use Kunststube\CSRFP\SignatureGenerator;
use Dotenv;


class ValidatorTest extends \PHPUnit\Framework\TestCase{

    protected $request;
    protected $response;
    protected $validator;
    /*protected $testdata;*/


    /*protected function setUpRequestResponse(){
        if ($this->testdata == null){
            $this->testdata = [];
        }

        $this->request = new Request($this->testdata);
        $this->response = new Response($this->request);
        $this->validator = new Validator($this->request,$this->response);
    }*/



    protected function setUp()
    {
        $signer = $this->getMockBuilder('Kunststube\CSRFP\SignatureGenerator')
            ->setConstructorArgs(['abc123'])
            ->getMock();

        $this->request = $this->getMockBuilder('Acme\Http\Request')
            ->getMock();

        $this->response = $this->getMockBuilder('Acme\Http\Response')
            ->setConstructorArgs([$this->request, $signer])
            ->getMock();

        /*parent::setUp(); // TODO: Change the autogenerated stub*/
    }

    public function testGetIsValidReturnsFalse(){
        $validator = new Validator($this->request,$this->response);
        $validator->setIsValid(false);
        $this->assertFalse($validator->getIsValid());
    }

    /*


    public function testGetIsValidReturnsTrue(){
        $this->setUpRequestResponse();
        $this->validator->setIsValid(true);
        $this->assertTrue($this->validator->getIsValid());
    }

      public function testCheckForMinStringLengthWithValidData(){
        $this->testdata = ["mintype"=>"yellow"];
        $this->setUpRequestResponse();

        $errors = $this->validator->check(["mintype" => "min:3"]);
        $this->assertCount(0,$errors);
    }

    public function testCheckForMinStringLengthWithInvalidData(){
        $this->testdata = ["mintype"=>"x"];
        $this->setUpRequestResponse();

        $errors = $this->validator->check(["mintype" => "min:3"]);
        $this->assertCount(1,$errors);
    }

    public function testCheckForEmailWithValidData(){
        $this->testdata = ["mintype"=>"john@doe.com"];
        $this->setUpRequestResponse();
        $errors = $this->validator->check(['mintype'=>"email"]);
        $this->assertCount(0,$errors);
    }

    public function testCheckForEmailWithInvalidData(){
        $this->testdata = ["mintype"=>"whatever"];
        $this->setUpRequestResponse();
        $errors = $this->validator->check(['mintype'=>"email"]);
        $this->assertCount(1,$errors);
    }

    public function testValidateWithInvalidData(){
        $this->testdata = ["check_field"=>"x"];
        $this->setUpRequestResponse();
        $this->validator->validate(["check_field"=>"email"], '/register' );
    }*/



}