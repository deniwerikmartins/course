<?php
/**
 * Created by PhpStorm.
 * User: PXP DIGITAL
 * Date: 18/05/2018
 * Time: 09:58
 */
namespace Acme\Tests;

/*use Acme\Http\Response;
use Acme\Http\Request;*/
use Acme\Validation\Validator;
use Kunststube\CSRFP\SignatureGenerator;
use Dotenv;


class ValidatorTest extends \PHPUnit\Framework\TestCase{

    protected $request;
    protected $response;
   /* protected $validator;*/
    protected $session;
    protected $blade;
    /*protected $testdata;*/


    /*protected function setUpRequestResponse(){
        if ($this->testdata == null){
            $this->testdata = [];
        }

        $this->request = new Request($this->testdata);
        $this->response = new Response($this->request);
        $this->validator = new Validator($this->request,$this->response);
    }*/



    protected function setUp()
    {
        $signer = $this->getMockBuilder('Kunststube\CSRFP\SignatureGenerator')
            ->setConstructorArgs(['abc123'])
            ->getMock();

        $this->request = $this->getMockBuilder('Acme\Http\Request')
            ->getMock();

        $this->session = $this->getMockBuilder("Acme\Http\Session")
            ->getMock();

        $this->blade = $this->getMockBuilder("duncan3dc\Laravel\BladeInstance")
            ->setConstructorArgs(['abc123', 'abc'])
            ->getMock();

        $this->response = $this->getMockBuilder('Acme\Http\Response')
            ->setConstructorArgs([$this->request, $signer, $this->blade, $this->session])
            ->getMock();

        /*parent::setUp(); // TODO: Change the autogenerated stub*/
    }

    public function getReq($input = ""){
        $req = $this->getMockBuilder('Acme\Http\Request')
            ->getMock();

        $req->expects($this->once())
            ->method('input')
            ->will($this->returnValue($input));

        return $req;

    }

    public function testGetIsValidReturnsFalse(){
        $validator = new Validator($this->request,$this->response);
        $validator->setIsValid(false);
        $this->assertFalse($validator->getIsValid());
    }

    public function testGetIsValidReturnsTrue(){
        $validator = new Validator($this->request,$this->response);
        $validator->setIsValid(true);
        $this->assertTrue($validator->getIsValid());
    }

    public function testCheckForMinStringLengthWithValidData(){

        $req = $this->getReq("yellow");

        $validator = new Validator($req, $this->response);

        $errors = $validator->check(["mintype" => "min:3"]);
        $this->assertCount(0,$errors);
    }

    public function testCheckForMinStringLengthWithInvalidData(){
        $req = $this->getReq("x");

            $validator = new Validator($req, $this->response);

        $errors = $validator->check(["mintype" => "min:3"]);
        $this->assertCount(1,$errors);
    }


    public function testCheckForEmailWithValidData(){
        $req = $this->getReq("john@doe.com");

        $validator = new Validator($req, $this->response);
        $errors = $validator->check(['mintype'=>"email"]);
        $this->assertCount(0,$errors);
    }


    public function testCheckForEmailWithInvalidData(){
        $req = $this->getReq("email");

        $validator = new Validator($req, $this->response);
        $errors = $validator->check(['mintype'=>"email"]);
        $this->assertCount(1,$errors);
    }

    public function testCheckForEqualToWithValidData(){

        // all methods are stubs, all methods return null, all methods can be overridden
        $req = $this->getMockBuilder("Acme\Http\Request")
            ->getMock();
        $req->expects($this->at(0))
            ->method('input')
            ->will($this->returnValue('jack'));
        $req->expects($this->at(1))
            ->method('input')
            ->will($this->returnValue('jack'));

        $validator = new Validator($req,$this->response);
        $errors = $validator->check(["my_field"=>"equalTo:another_field"]);
        $this->assertCount(0,$errors);
    }

    public function testCheckForEqualToWithInvalidData(){
        // all methods are stubs, all methods return null, all methods can be overridden
        $req = $this->getMockBuilder("Acme\Http\Request")
            ->getMock();
        $req->expects($this->at(0))
            ->method('input')
            ->will($this->returnValue('jack'));
        $req->expects($this->at(1))
            ->method('input')
            ->will($this->returnValue('jill'));

        $validator = new Validator($req,$this->response);
        $errors = $validator->check(["my_field"=>"equalTo:another_field"]);
        $this->assertCount(1,$errors);
    }

    public function testCheckForUniqueValidData(){
        $validator = $this->getMockBuilder("Acme\Validation\Validator")
            ->setConstructorArgs([$this->request, $this->response])
            ->setMethods(["getRows"])
            ->getMock();

        $validator->method("getRows")
            ->willReturn([]);

        $erros = $validator->check(["my_field" => "unique:user"]);
        $this->assertCount(0,$erros);
    }

    public function testCheckForUniqueInvalidData(){
        $validator = $this->getMockBuilder("Acme\Validation\Validator")
            ->setConstructorArgs([$this->request, $this->response])
            ->setMethods(["getRows"])
            ->getMock();

        $validator->method("getRows")
            ->willReturn(["a"]);

        $erros = $validator->check(["my_field" => "unique:user"]);
        $this->assertCount(1,$erros);
    }






    /*



public function testValidateWithInvalidData(){
        $this->testdata = ["check_field"=>"x"];
        $this->setUpRequestResponse();
        $this->validator->validate(["check_field"=>"email"], '/register' );
    }




    */



}